testRows = sample(allRows, trunc(length(allRows) * 0.3))
vowel_test = ds_vowels[testRows,]
vowel_train = ds_vowels[-testRows,]
model = svm(Class~., data = vowel_train, kernel="radial", gamma = 0.1, cost = 20)
prediction = predict(model, vowel_test[,-13])
confusion_matrix = table(pred = prediction, true = vowel_test$Class)
agreement = prediction == vowel_test$Class
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
ds_vowels = read.csv("vowel.csv", head=TRUE, sep=",")
allRows = 1:nrow(ds_vowels)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
vowel_test = ds_vowels[testRows,]
vowel_train = ds_vowels[-testRows,]
model = svm(Class~., data = vowel_train, kernel="radial", gamma = 0.1, cost = 30)
prediction = predict(model, vowel_test[,-13])
confusion_matrix = table(pred = prediction, true = vowel_test$Class)
agreement = prediction == vowel_test$Class
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
ds_vowels = read.csv("vowel.csv", head=TRUE, sep=",")
allRows = 1:nrow(ds_vowels)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
vowel_test = ds_vowels[testRows,]
vowel_train = ds_vowels[-testRows,]
model = svm(Class~., data = vowel_train, kernel="radial", gamma = 0.1, cost = 15)
prediction = predict(model, vowel_test[,-13])
confusion_matrix = table(pred = prediction, true = vowel_test$Class)
agreement = prediction == vowel_test$Class
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
ds_vowels = read.csv("vowel.csv", head=TRUE, sep=",")
allRows = 1:nrow(ds_vowels)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
vowel_test = ds_vowels[testRows,]
vowel_train = ds_vowels[-testRows,]
model = svm(Class~., data = vowel_train, kernel="radial", gamma = 0.1, cost = 15)
prediction = predict(model, vowel_test[,-13])
confusion_matrix = table(pred = prediction, true = vowel_test$Class)
agreement = prediction == vowel_test$Class
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
ds_vowels = read.csv("vowel.csv", head=TRUE, sep=",")
allRows = 1:nrow(ds_vowels)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
vowel_test = ds_vowels[testRows,]
vowel_train = ds_vowels[-testRows,]
model = svm(Class~., data = vowel_train, kernel="radial", gamma = 0.1, cost = 15)
prediction = predict(model, vowel_test[,-13])
confusion_matrix = table(pred = prediction, true = vowel_test$Class)
agreement = prediction == vowel_test$Class
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
ds_vowels = read.csv("vowel.csv", head=TRUE, sep=",")
allRows = 1:nrow(ds_vowels)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
vowel_test = ds_vowels[testRows,]
vowel_train = ds_vowels[-testRows,]
model = svm(Class~., data = vowel_train, kernel="radial", gamma = 0.01, cost = 15)
prediction = predict(model, vowel_test[,-13])
confusion_matrix = table(pred = prediction, true = vowel_test$Class)
agreement = prediction == vowel_test$Class
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
ds_vowels = read.csv("vowel.csv", head=TRUE, sep=",")
allRows = 1:nrow(ds_vowels)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
vowel_test = ds_vowels[testRows,]
vowel_train = ds_vowels[-testRows,]
model = svm(Class~., data = vowel_train, kernel="radial", gamma = 0.5, cost = 15)
prediction = predict(model, vowel_test[,-13])
confusion_matrix = table(pred = prediction, true = vowel_test$Class)
agreement = prediction == vowel_test$Class
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
ds_vowels = read.csv("vowel.csv", head=TRUE, sep=",")
allRows = 1:nrow(ds_vowels)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
vowel_test = ds_vowels[testRows,]
vowel_train = ds_vowels[-testRows,]
model = svm(Class~., data = vowel_train, kernel="radial", gamma = 1, cost = 15)
prediction = predict(model, vowel_test[,-13])
confusion_matrix = table(pred = prediction, true = vowel_test$Class)
agreement = prediction == vowel_test$Class
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
ds_vowels = read.csv("vowel.csv", head=TRUE, sep=",")
allRows = 1:nrow(ds_vowels)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
vowel_test = ds_vowels[testRows,]
vowel_train = ds_vowels[-testRows,]
model = svm(Class~., data = vowel_train, kernel="radial", gamma = .1, cost = 100)
prediction = predict(model, vowel_test[,-13])
confusion_matrix = table(pred = prediction, true = vowel_test$Class)
agreement = prediction == vowel_test$Class
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(Class~., data = letters_train, kernel="radial", gamma = .1, cost = 100)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .1, cost = 100)
prediction = predict(model, letters_test[,-13])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .1, cost = 100)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .001, cost = 10)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .01, cost = 10)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .1, cost = 1)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .5, cost = 1)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .5, cost = 11)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .5, cost = 9)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .4, cost = 9)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .3, cost = 9)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .2, cost = 7)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .1, cost = 7)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .2, cost = 7)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .2, cost = 7)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
letters = read.csv("letters.csv", head=TRUE, sep=",")
allRows = 1:nrow(letters)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
letters_test = letters[testRows,]
letters_train = letters[-testRows,]
model = svm(letter~., data = letters_train, kernel="radial", gamma = .2, cost = 7)
prediction = predict(model, letters_test[,-1])
confusion_matrix = table(pred = prediction, true = letters_test$letter)
agreement = prediction == letters_test$letter
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(letter~., data = abalone_train, kernel="radial", gamma = .2, cost = 7)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .2, cost = 7)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .2, cost = 10)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .2, cost = 100)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .2, cost = 1000)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .1, cost = 1000)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .001, cost = 1000)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .001, cost = 10)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .001, cost = 10)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .001, cost = 10)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .1, cost = 10)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .1, cost = 100)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .1, cost = 1000)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .1, cost = 50)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .01, cost = 50)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
library (e1071)
abalone = read.csv("abalone.csv", head=TRUE, sep=",")
allRows = 1:nrow(abalone)
testRows = sample(allRows, trunc(length(allRows) * 0.3))
abalone_test = abalone[testRows,]
abalone_train = abalone[-testRows,]
model = svm(Rings~., data = abalone_train, kernel="radial", gamma = .001, cost = 50)
prediction = predict(model, abalone_test[,-9])
confusion_matrix = table(pred = prediction, true = abalone_test$Rings)
agreement = prediction == abalone_test$Rings
accuracy = prop.table(table(agreement))
print(confusion_matrix)
print(accuracy)
